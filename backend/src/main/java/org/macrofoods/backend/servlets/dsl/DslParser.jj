/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(DslParser)
package org.macrofoods.backend.servlets.dsl;

import java.util.List;
import java.util.ArrayList;
import java.math.BigDecimal;
import org.macrofoods.backend.servlets.dsl.DslIdentifier;
import org.macrofoods.backend.servlets.dsl.DslLiteral;
import org.macrofoods.backend.servlets.dsl.DslNode;
import org.macrofoods.backend.servlets.dsl.DslOperator;
import org.macrofoods.backend.servlets.dsl.DslSelect;


/** Simple brace matcher. */
public class DslParser {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    DslParser parser = new DslParser(System.in);
    parser.root();
  }

}

PARSER_END(DslParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |< STRING: "'" ( ["a"-"z","A"-"Z","0"-"9"] )* "'" >
  |< INTEGER: ["1"-"9"] (["0"-"9"])* >
  |< DECIMAL: ["0"-"9"] "." (["0"-"9"])* > 
  |<AND: "&&" >
  |<OR: "||" >
  |<NOT: "!" >
}

/** Root production. */
DslNode root() :
{
	DslNode root;
}
{
  root=select() 
  { 
  	return root; 
  }
  <EOF>
}

DslSelect select() :
{
	Token id;
	List<DslSelect> children = new ArrayList<DslSelect>();
	DslSelect n = null;
	DslCall filter = null;
}
{ 
   id=<ID> 
   	[ 
		"[" filter=call() "]" 
	]
	[
   		 "(" n=select() { children.add(n); } ("," n=select() { children.add(n); })* ")" 
  		|"/" n=select() { children.add(n); } 
	]
	
   { 
   	return new DslSelect(new DslIdentifier(id.image), children, filter);
   }
}

DslCall call() :
{
	DslCall base;
	DslCall right;
	final Token id;
	final DslLiteral constant;
}
{
	id=<ID> "=" constant=literal() 
	{
		base = new DslCall(DslOperator.EQ, new DslIdentifier(id.image), constant);
	} 
	[
		<AND> right=call()
		{
			base = new DslCall(DslOperator.AND, base, right);
		}
		| <OR> right=call()
		{
			base = new DslCall(DslOperator.OR, base, right);
		}
		| <NOT> right=call()
		{
			base = new DslCall(DslOperator.NOT, right, null);
		}
	]
	{
		return base;
	}
}

DslLiteral literal() :
{
	Token t;
}
{
	t=<STRING>
	{
		return new DslLiteral(t.image.substring(1,t.image.length()-1));
	} 
	| t=<INTEGER>
	{
		return new DslLiteral(Integer.valueOf(t.image));
	} 
	| t=<DECIMAL>
	{
		return new DslLiteral(new BigDecimal(t.image));
	}
	
}